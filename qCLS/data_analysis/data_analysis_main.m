function data_analysis_main()

    addpath ../data/
    addpath ../qCLS_core/
    
    % get the model
    S0 = load('qCLS_PCA_model.mat');
    qcls_pca_model = qCLS_PCA_Model(S0.model);
    Ncomp = S0.model.par.Ncomp;
    phi0_mu = mean(S0.model.score)';
    phi0_std = std(S0.model.score)';
    
    % get the data
    [file,path] = uigetfile('*.mat','Select a data file generated by the qCLS app');
    S = load([path, file]);     
    x = S.testdata.qcls.x;
    r = S.testdata.qcls.r;
    
    
    % maximum-likelihood estimate of the model parameter for the
    % participant
    ninit = 200;
    loglikelihood = zeros(1, ninit);
    phi0 = zeros(Ncomp, ninit);
    for iinit = 1:ninit
        phi0(:, iinit) = phi0_mu + phi0_std.* randn(Ncomp,1);
        loglikelihood(iinit) = qcls_pca_model.calc_likelihood(phi0(:, iinit), x, r);
    end
    [~, maxlikelihoodidx] = max(loglikelihood);
    phi0f = phi0(:, maxlikelihoodidx);
    listener_score = fminsearch(@(phi) -qcls_pca_model.calc_likelihood(phi, x, r), phi0f);
    
    % return the results
    [cb_est, elc_est] = qcls_pca_model.run_model(listener_score);
    
    figure;
    subplot(121);
    semilogx(qcls_pca_model.freqs, cb_est');
    title('Category Boundaries');
    xlabel('Frequency (Hz)');
    ylabel('Sound Pressure Level (dB SPL)');
    set(gca,'XTick',qcls_pca_model.freqs,'XMinorTick','off');
    axis([250 8000 -20 120]);
    
    subplot(122);
    semilogx(qcls_pca_model.freqs, elc_est');
    title('Equal-Loudness Contours');
    xlabel('Frequency (Hz)');
    ylabel('Sound Pressure Level (dB SPL)');
    set(gca,'XTick',qcls_pca_model.freqs,'XMinorTick','off');
    axis([250 8000 -20 120]);

end
